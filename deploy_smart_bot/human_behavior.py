"""
Human Behavior Simulator
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
"""

import asyncio
import random
import re
import time
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import logging

logger = logging.getLogger(__name__)

class MessageType(Enum):
    QUESTION = "question"
    STATEMENT = "statement"
    THANKS = "thanks"
    GREETING = "greeting"
    COMPLAINT = "complaint"
    REQUEST = "request"
    CLARIFICATION = "clarification"

class EmotionalState(Enum):
    NEUTRAL = "neutral"
    POSITIVE = "positive"
    THINKING = "thinking"
    HELPFUL = "helpful"
    EMPATHETIC = "empathetic"
    EXCITED = "excited"
    CONCERNED = "concerned"

@dataclass
class HumanBehaviorConfig:
    # –¢–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    min_typing_speed: float = 0.8  # —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (–º–µ–¥–ª–µ–Ω–Ω–æ)
    max_typing_speed: float = 2.5  # —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (–±—ã—Å—Ç—Ä–æ)
    thinking_pause_min: float = 1.0
    thinking_pause_max: float = 4.0
    correction_pause: float = 2.0  # –ø–∞—É–∑–∞ –ø—Ä–∏ "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"
    
    # –≠–º–æ—Ü–∏–∏ –∏ —Ä–µ–∞–∫—Ü–∏–∏
    emoji_probability: float = 0.3  # –£–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —ç–º–æ–¥–∑–∏
    micro_reaction_probability: float = 0.3  # –£–º–µ–Ω—å—à–∞–µ–º –º–∏–∫—Ä–æ-—Ä–µ–∞–∫—Ü–∏–∏
    emotional_response_probability: float = 0.2  # –£–º–µ–Ω—å—à–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
    
    # –†–∞–∑–±–∏–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    max_message_length: int = 200  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π
    split_probability: float = 0.3  # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏–≤–∫–∏
    connector_probability: float = 0.2  # –£–º–µ–Ω—å—à–∞–µ–º —Å–≤—è–∑—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã
    
    # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    typo_probability: float = 0.05  # 5% —à–∞–Ω—Å –æ–ø–µ—á–∞—Ç–∫–∏
    self_correction_probability: float = 0.3  # 30% —à–∞–Ω—Å —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    hesitation_probability: float = 0.2  # 20% —à–∞–Ω—Å –∫–æ–ª–µ–±–∞–Ω–∏—è

class HumanBehaviorSimulator:
    def __init__(self, config: HumanBehaviorConfig = None):
        self.config = config or HumanBehaviorConfig()
        self.conversation_history = []
        self.user_emotional_context = {}
        self.last_response_time = 0
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
        self._init_reaction_dictionaries()
        
    def _init_reaction_dictionaries(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π"""
        
        # –ú–∏–∫—Ä–æ-—Ä–µ–∞–∫—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        self.micro_reactions = {
            MessageType.QUESTION: [
                "–•–º ü§î", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üí≠", "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! üëç", 
                "–°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é... üß†", "–ê–≥–∞, –ø–æ–Ω—è–ª üìù"
            ],
            MessageType.THANKS: [
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä", "–†–∞–¥ –ø–æ–º–æ—á—å! ‚ú®", "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üëç",
                "–ù–µ –∑–∞ —á—Ç–æ! üòÑ", "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å! ü§ù"
            ],
            MessageType.REQUEST: [
                "–ö–æ–Ω–µ—á–Ω–æ! üí™", "–ü–æ–º–æ–≥—É! ü§ù", "–°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä—É—Å—å! üîç",
                "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! ‚úÖ", "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è! üéØ"
            ],
            MessageType.GREETING: [
                "–ü—Ä–∏–≤–µ—Ç! üëã", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä", "–†–∞–¥ –≤–∏–¥–µ—Ç—å! ‚ú®",
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üåü", "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòÑ"
            ],
            MessageType.COMPLAINT: [
                "–ü–æ–Ω–∏–º–∞—é üòî", "–°–æ—á—É–≤—Å—Ç–≤—É—é üíô", "–î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º! üí™",
                "–†–∞–∑–±–µ—Ä–µ–º—Å—è! üîß", "–ü–æ–º–æ–∂–µ–º! ü§ù"
            ]
        }
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–º—è–≥—á–∏—Ç–µ–ª–∏
        self.softeners = [
            "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "–∫–∞–∂–µ—Ç—Å—è", "–ø–æ –æ—â—É—â–µ–Ω–∏—è–º", "–≤–æ–∑–º–æ–∂–Ω–æ", 
            "—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ", "–≤—Ä–æ–¥–µ –±—ã", "–∫–∞–∫ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è", "–¥—É–º–∞—é",
            "–Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥", "–µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ", "—á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è"
        ]
        
        # –°–≤—è–∑—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
        self.connectors = [
            "–ö—Å—Ç–∞—Ç–∏,", "–¢–∞–∫–∂–µ,", "–ï—â–µ –º–æ–º–µ–Ω—Ç:", "–î–æ–ø–æ–ª–Ω—é:",
            "–ò –µ—â–µ:", "–ü—Ä–æ–¥–æ–ª–∂–∞—é:", "–î–æ–±–∞–≤–ª—é:", "–í–∞–∂–Ω–æ:",
            "–ú–µ–∂–¥—É –ø—Ä–æ—á–∏–º,", "–ö—Ä–æ–º–µ —Ç–æ–≥–æ,", "–ü–ª—é—Å –∫ —ç—Ç–æ–º—É,"
        ]
        
        # –≠–º–æ–¥–∑–∏ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        self.emojis_by_emotion = {
            EmotionalState.POSITIVE: ["üòä", "üòÑ", "‚ú®", "üåü", "üëç", "üëå", "üéâ"],
            EmotionalState.THINKING: ["ü§î", "üí≠", "üß†", "ü§ì", "üìö", "üîç"],
            EmotionalState.HELPFUL: ["ü§ù", "üí™", "‚úÖ", "üéØ", "üìã", "üîß"],
            EmotionalState.EMPATHETIC: ["üíô", "ü§ó", "üòå", "üíö", "üå∏"],
            EmotionalState.EXCITED: ["üöÄ", "‚ö°", "üî•", "üí•", "üéä"],
            EmotionalState.CONCERNED: ["üòü", "üòî", "ü§î", "üí≠", "üîç"],
            EmotionalState.NEUTRAL: ["üìù", "üìå", "üîç", "‚öôÔ∏è", "üìã"]
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏–π –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        self.hesitation_patterns = [
            "—ç—ç—ç...", "–º–º–º...", "—Ö–º...", "–Ω—É...", "–∫–∞–∫ –±—ã...",
            "–≤ –æ–±—â–µ–º...", "—Ç–æ –µ—Å—Ç—å...", "–≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ..."
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        self.correction_patterns = [
            "—Ç–æ—á–Ω–µ–µ", "–≤–µ—Ä–Ω–µ–µ", "–ª—É—á—à–µ —Å–∫–∞–∑–∞—Ç—å", "–∏–º–µ—é –≤ –≤–∏–¥—É",
            "—Ç–æ –µ—Å—Ç—å", "–∞ –∏–º–µ–Ω–Ω–æ", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ"
        ]

    def analyze_message_context(self, text: str, user_id: str) -> Tuple[MessageType, EmotionalState]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        
        text_lower = text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if text.strip().endswith('?'):
            message_type = MessageType.QUESTION
        elif any(word in text_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ"]):
            message_type = MessageType.THANKS
        elif any(word in text_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"]):
            message_type = MessageType.GREETING
        elif any(word in text_lower for word in ["–ø—Ä–æ–±–ª–µ–º–∞", "–æ—à–∏–±–∫–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø–ª–æ—Ö–æ"]):
            message_type = MessageType.COMPLAINT
        elif any(word in text_lower for word in ["–ø–æ–º–æ–≥–∏—Ç–µ", "–ø–æ–º–æ—â—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–Ω—É–∂–Ω–æ"]):
            message_type = MessageType.REQUEST
        else:
            message_type = MessageType.STATEMENT
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if any(word in text_lower for word in ["–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å–Ω–æ", "–∑–¥–æ—Ä–æ–≤–æ"]):
            emotional_state = EmotionalState.POSITIVE
        elif any(word in text_lower for word in ["–¥—É–º–∞—é", "–∫–∞–∂–µ—Ç—Å—è", "–≤–æ–∑–º–æ–∂–Ω–æ", "–Ω–∞–≤–µ—Ä–Ω–æ–µ"]):
            emotional_state = EmotionalState.THINKING
        elif any(word in text_lower for word in ["–ø–æ–º–æ–≥—É", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Ä–µ—à–µ–Ω–∏–µ"]):
            emotional_state = EmotionalState.HELPFUL
        elif any(word in text_lower for word in ["–ø–æ–Ω–∏–º–∞—é", "—Å–æ—á—É–≤—Å—Ç–≤—É—é", "–∂–∞–ª—å"]):
            emotional_state = EmotionalState.EMPATHETIC
        elif any(word in text_lower for word in ["—É—Ä–∞", "–∫—Ä—É—Ç–æ", "–≤–∞—É", "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ"]):
            emotional_state = EmotionalState.EXCITED
        elif any(word in text_lower for word in ["–ø—Ä–æ–±–ª–µ–º–∞", "–±–µ—Å–ø–æ–∫–æ–∏—Ç", "–≤–æ–ª–Ω—É–µ—Ç"]):
            emotional_state = EmotionalState.CONCERNED
        else:
            emotional_state = EmotionalState.NEUTRAL
            
        return message_type, emotional_state

    def calculate_realistic_typing_time(self, text: str) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—á–∞—Ç–∏ —Å —É—á–µ—Ç–æ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π"""
        
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏
        base_time = len(text) / random.uniform(self.config.min_typing_speed, self.config.max_typing_speed)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        thinking_pauses = 0
        sentences = text.split('.')
        for sentence in sentences:
            if len(sentence.strip()) > 20:  # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
                thinking_pauses += random.uniform(0.5, 2.0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏)
        if random.random() < self.config.typo_probability:
            base_time += self.config.correction_pause
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–µ–±–∞–Ω–∏—è
        if random.random() < self.config.hesitation_probability:
            base_time += random.uniform(1.0, 3.0)
        
        return base_time + thinking_pauses

    def add_human_imperfections(self, text: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤ –≤ —Ç–µ–∫—Å—Ç"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ (—Ä–µ–¥–∫–æ)
        if random.random() < self.config.typo_probability:
            words = text.split()
            if words:
                typo_word_index = random.randint(0, len(words) - 1)
                word = words[typo_word_index]
                if len(word) > 3:
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–ø–µ—á–∞—Ç–∫–∞ - –∑–∞–º–µ–Ω–∞ –æ–¥–Ω–æ–π –±—É–∫–≤—ã
                    char_index = random.randint(1, len(word) - 2)
                    typo_word = word[:char_index] + random.choice('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è') + word[char_index + 1:]
                    words[typo_word_index] = typo_word
                    text = ' '.join(words)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é
        if random.random() < self.config.self_correction_probability and len(text) > 50:
            correction = random.choice(self.correction_patterns)
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = text.split('.')
            if len(sentences) > 1:
                mid_sentence = len(sentences) // 2
                sentences[mid_sentence] = f"{sentences[mid_sentence]}, {correction},"
                text = '. '.join(sentences)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–µ–±–∞–Ω–∏—è
        if random.random() < self.config.hesitation_probability:
            hesitation = random.choice(self.hesitation_patterns)
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω—É
            if random.random() < 0.5:
                text = f"{hesitation} {text}"
            else:
                words = text.split()
                if len(words) > 3:
                    insert_pos = len(words) // 2
                    words.insert(insert_pos, hesitation)
                    text = ' '.join(words)
        
        return text

    def add_emotional_response(self, text: str, message_type: MessageType, emotional_state: EmotionalState) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Ä–æ-—Ä–µ–∞–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (message_type in [MessageType.QUESTION, MessageType.REQUEST, MessageType.COMPLAINT] and 
            random.random() < self.config.micro_reaction_probability):
            if message_type in self.micro_reactions:
                reaction = random.choice(self.micro_reactions[message_type])
                text = f"{reaction}\n\n{text}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º—è–≥—á–∏—Ç–µ–ª—å —Ä–µ–∂–µ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if (len(text) > 100 and 
            random.random() < 0.2 and 
            message_type not in [MessageType.THANKS, MessageType.GREETING]):
            softener = random.choice(self.softeners)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = text.split('.')
            if sentences and sentences[0].strip():
                first_sentence = sentences[0].strip()
                if not first_sentence.lower().startswith(tuple(s.lower() for s in self.softeners)):
                    sentences[0] = f"{softener}, {first_sentence.lower()}"
                    text = '. '.join(sentences)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∂–µ –∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ
        if random.random() < self.config.emoji_probability:
            if emotional_state in self.emojis_by_emotion:
                emoji = random.choice(self.emojis_by_emotion[emotional_state])
                text += f" {emoji}"
        
        return text

    def split_message_naturally(self, text: str) -> List[str]:
        """–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ - –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ–º
        if len(text) <= self.config.max_message_length:
            return [text]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å
        if random.random() > self.config.split_probability:
            return [text]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if s.strip()]
        
        if len(sentences) <= 1:
            return [text]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω–æ)
        messages = []
        current_message = ""
        
        for sentence in sentences:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –±–ª–æ–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if (len(current_message + sentence) > self.config.max_message_length * 1.5 and current_message) or \
               (any(word in sentence.lower() for word in ["–≤–∞–∂–Ω–æ", "–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ", "–∫—Å—Ç–∞—Ç–∏", "–º–µ–∂–¥—É –ø—Ä–æ—á–∏–º"]) and current_message):
                messages.append(current_message.strip())
                current_message = sentence + "."
            else:
                current_message += sentence + ". "
        
        if current_message.strip():
            messages.append(current_message.strip())
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        if len(messages) > 3:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ 2-3 —Å–æ–æ–±—â–µ–Ω–∏—è
            combined_messages = []
            for i in range(0, len(messages), 2):
                if i + 1 < len(messages):
                    combined = messages[i] + " " + messages[i + 1]
                    combined_messages.append(combined)
                else:
                    combined_messages.append(messages[i])
            messages = combined_messages
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã —Ä–µ–¥–∫–æ
        if len(messages) > 1:
            for i in range(1, len(messages)):
                if random.random() < self.config.connector_probability:
                    connector = random.choice(self.connectors)
                    messages[i] = f"{connector} {messages[i].lower()}"
        
        return messages

    def process_response(self, text: str, user_id: str) -> Tuple[List[str], float]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        message_type, emotional_state = self.analyze_message_context(text, user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞
        text = self.add_human_imperfections(text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
        text = self.add_emotional_response(text, message_type, emotional_state)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = self.split_message_naturally(text)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        typing_times = []
        for message in messages:
            typing_time = self.calculate_realistic_typing_time(message)
            typing_times.append(typing_time)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.conversation_history.append({
            'user_id': user_id,
            'message_type': message_type,
            'emotional_state': emotional_state,
            'timestamp': time.time()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        return messages, typing_times

    def get_thinking_delay(self, user_id: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        base_delay = random.uniform(self.config.thinking_pause_min, self.config.thinking_pause_max)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        recent_messages = [msg for msg in self.conversation_history if msg['user_id'] == user_id][-3:]
        if recent_messages:
            last_message = recent_messages[-1]
            if last_message['message_type'] == MessageType.QUESTION:
                base_delay += random.uniform(1.0, 3.0)
            elif last_message['message_type'] == MessageType.COMPLAINT:
                base_delay += random.uniform(0.5, 2.0)
        
        return base_delay

    def get_message_delay(self, message_index: int, total_messages: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        
        if message_index >= total_messages - 1:
            return 0  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        base_delay = random.uniform(1.0, 3.0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if total_messages > 2:
            base_delay += random.uniform(0.5, 2.0)
        
        return base_delay

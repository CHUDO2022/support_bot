# -*- coding: utf-8 -*-
"""
–£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ñ–∞–π–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
"""

import json
import logging
from typing import Dict, List, Optional
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)

class SmartFileDetector:
    """–£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ñ–∞–π–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI"""
    
    def __init__(self, openai_client: AsyncOpenAI):
        self.openai_client = openai_client
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        self.system_prompt = """
–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞.

–¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
1. TZ_FILE - –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∞–π–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (Excel)
2. WAREHOUSE_IMAGES - –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ, –∞–¥—Ä–µ—Å–∞, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è
3. GENERAL_CHAT - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ

–ü–†–ê–í–ò–õ–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:

TZ_FILE - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–µ —Å–ª–æ–≤–∞:
- "—Ñ–∞–π–ª –¢–ó", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "—ç–∫—Å–µ–ª—å —Ñ–∞–π–ª", "–±–ª–∞–Ω–∫", "—Ñ–æ—Ä–º–∞"
- "–∑–∞–ø–æ–ª–Ω–∏—Ç—å", "—Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"

WAREHOUSE_IMAGES - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –æ —Å–∫–ª–∞–¥–µ:
- "—Å–∫–ª–∞–¥", "–∞–¥—Ä–µ—Å", "–≥–¥–µ", "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è", "—Å—Ö–µ–º–∞", "–ø—Ä–æ–µ–∑–¥"
- "–ø–æ–∫–∞–∂–∏—Ç–µ —Å–∫–ª–∞–¥", "—Ñ–æ—Ç–æ —Å–∫–ª–∞–¥–∞", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞"
- "–≤ –∫–∞–∑–∞–Ω–∏", "–≤ –º–æ—Å–∫–≤–µ", "–Ω–∞–π—Ç–∏ —Å–∫–ª–∞–¥"

GENERAL_CHAT - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ:
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞—Å—á–µ—Ç—ã, –ø–æ–º–æ—â—å

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "type": "TZ_FILE|WAREHOUSE_IMAGES|GENERAL_CHAT",
    "confidence": 0.95,
    "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}
"""
    
    async def detect_request_type(self, message_text: str) -> Dict[str, any]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": message_text}
                ],
                temperature=0.1,
                max_tokens=200
            )
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            result_text = response.choices[0].message.content.strip()
            
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
            if result_text.startswith("```json"):
                result_text = result_text[7:]
            if result_text.endswith("```"):
                result_text = result_text[:-3]
            
            result = json.loads(result_text)
            
            logger.info(f"Detected request type: {result['type']} (confidence: {result['confidence']})")
            return result
            
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            return self._fallback_detection(message_text)
        except Exception as e:
            logger.error(f"Error in smart detection: {e}")
            return self._fallback_detection(message_text)
    
    def _fallback_detection(self, message_text: str) -> Dict[str, any]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
        text_lower = message_text.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏ —á–µ—Ç–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        tz_keywords = ["—Ñ–∞–π–ª —Ç–∑", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "—ç–∫—Å–µ–ª—å —Ñ–∞–π–ª", "–±–ª–∞–Ω–∫", "—Ñ–æ—Ä–º–∞"]
        warehouse_keywords = ["—Å–∫–ª–∞–¥", "–∞–¥—Ä–µ—Å", "–≥–¥–µ", "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è", "—Å—Ö–µ–º–∞", "–ø—Ä–æ–µ–∑–¥"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∞–π–ª –¢–ó
        if any(keyword in text_lower for keyword in tz_keywords):
            return {
                "type": "TZ_FILE",
                "confidence": 0.8,
                "reasoning": "–∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∞–π–ª –¢–ó"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ
        if any(keyword in text_lower for keyword in warehouse_keywords):
            return {
                "type": "WAREHOUSE_IMAGES",
                "confidence": 0.8,
                "reasoning": "–∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ"
            }
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –æ–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
        return {
            "type": "GENERAL_CHAT",
            "confidence": 0.9,
            "reasoning": "–æ–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
        }

async def test_smart_detector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    from openai import AsyncOpenAI
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç (–Ω—É–∂–µ–Ω API –∫–ª—é—á)
    client = AsyncOpenAI(api_key="your-api-key-here")
    detector = SmartFileDetector(client)
    
    test_messages = [
        "–ú–Ω–µ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª –¢–ó –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞",
        "–Ω–æ—Å–∫–∏ 1000 —à—Ç—É–∫, ozon, –º–æ—Å–∫–≤–∞",
        "–ü–æ–∫–∞–∂–∏—Ç–µ —Å–∫–ª–∞–¥ –∏ –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è",
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ —Ñ—É—Ç–±–æ–ª–æ–∫?",
        "–ü—Ä–∏—à–ª–∏—Ç–µ —ç–∫—Å–µ–ª—å —Ñ–∞–π–ª",
        "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à —Å–∫–ª–∞–¥?",
        "–†–∞—Å—á–µ—Ç –¥–ª—è –∫—Ä–æ—Å—Å–æ–≤–æ–∫ 100 —à—Ç—É–∫"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n")
    
    for message in test_messages:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        try:
            result = await detector.detect_request_type(message)
            print(f"–¢–∏–ø: {result['type']}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result['reasoning']}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        print("-" * 50)

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_smart_detector())

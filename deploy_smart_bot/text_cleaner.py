# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º–µ—Ç–æ–∫ source –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
"""

import re
import logging

logger = logging.getLogger(__name__)

def clean_source_marks(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –º–µ—Ç–æ–∫ –≤–∏–¥–∞ [—Ü–∏—Ñ—Ä—ã:—Ü–∏—Ñ—Ä—ãsource], [—Ü–∏—Ñ—Ä—ã:—Ü–∏—Ñ—Ä—ãtsource], „Äê—Ü–∏—Ñ—Ä—ã:—Ü–∏—Ñ—Ä—ã‚Ä†source„Äë –∏ –ø–æ–¥–æ–±–Ω—ã—Ö.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –æ—Ç—Å—Ç—É–ø—ã –∏ —Ç–∞–±—É–ª—è—Ü–∏—é.
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text or not isinstance(text, str):
        return text
    
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–∫
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–∫–æ–±–æ–∫ –∏ —Å–∏–º–≤–æ–ª—ã
        patterns = [
            # –û–±—ã—á–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
            r'\[\d+:\d+source\]',      # [8:14source]
            r'\[\d+:\d+tsource\]',     # [8:0tsource]
            r'\[\d+:\d+ssource\]',     # [—Ü–∏—Ñ—Ä—ã:—Ü–∏—Ñ—Ä—ãssource]
            r'\[\d+:\d+[a-z]*source\]', # –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –±—É–∫–≤–∞–º–∏ –ø–µ—Ä–µ–¥ source
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–æ–±–∫–∏ „Äê„Äë —Å —Å–∏–º–≤–æ–ª–æ–º ‚Ä† –∏ –ª—é–±—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            r'„Äê\d+:\d+‚Ä†[^„Äë]*„Äë',      # „Äê4:11‚Ä†source„Äë, „Äê4:5‚Ä†Intensivny_kurs_bashkirskogo_yazyka.pdf„Äë
            
            # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–æ–±–æ–∫
            r'„Äå\d+:\d+[a-z]*source„Äç',   # —è–ø–æ–Ω—Å–∫–∏–µ —Å–∫–æ–±–∫–∏
            r'„Äà\d+:\d+[a-z]*source„Äâ',   # —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏
            r'„Ää\d+:\d+[a-z]*source„Äã',   # –¥–≤–æ–π–Ω—ã–µ —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è addresses.txt
            r'\[\d+:\d+taddresses\.txt\]',  # [6:0taddresses.txt]
            r'„Äê\d+:\d+‚Ä†addresses\.txt„Äë',   # „Äê6:0‚Ä†addresses.txt„Äë
        ]
        
        cleaned_text = text
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in patterns:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            cleaned_text = re.sub(pattern, '', cleaned_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            matches = re.findall(pattern, text)
            if matches:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {len(matches)} –º–µ—Ç–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}: {matches}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
        lines = cleaned_text.split('\n')
        processed_lines = []
        
        for line in lines:
            # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            content = re.sub(r' +', ' ', line)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            content = content.strip()
            
            processed_lines.append(content)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
        cleaned_text = '\n'.join(processed_lines)
        
        return cleaned_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º–µ—Ç–æ–∫ source: {e}")
        return text

def clean_all_text_marks(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç—Å—Ç—É–ø—ã.
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text or not isinstance(text, str):
        return text
    
    try:
        # –û—á–∏—â–∞–µ–º –æ—Ç –º–µ—Ç–æ–∫ source
        cleaned_text = clean_source_marks(text)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ []
        cleaned_text = re.sub(r'\[\s*\]', '', cleaned_text)
        
        # –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ [ ]
        cleaned_text = re.sub(r'\[\s+\]', '', cleaned_text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        lines = cleaned_text.split('\n')
        processed_lines = []
        
        for line in lines:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            leading_spaces = len(line) - len(line.lstrip())
            content = line.lstrip()
            
            # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            content = re.sub(r' +', ' ', content)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
            processed_line = ' ' * leading_spaces + content
            processed_lines.append(processed_line)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
        cleaned_text = '\n'.join(processed_lines)
        
        return cleaned_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –æ—á–∏—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return text

def test_cleaner():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    test_cases = [
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏
        ("–ü—Ä–∏–≤–µ—Ç [8:14source] –∫–∞–∫ –¥–µ–ª–∞?", "–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞?"),
        ("[12:1source] –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞", "–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞"),
        ("–ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ [5:10source]", "–ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞"),
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è addresses.txt
        ("–í –º–æ–µ–π –±–∞–∑–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ –≤ –ú–æ—Å–∫–≤–µ: —É–ª. –ü–æ–ª—è–Ω—ã, –¥. 5–ê, —Å—Ç—Ä. 1[6:0taddresses.txt].", 
         "–í –º–æ–µ–π –±–∞–∑–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ –≤ –ú–æ—Å–∫–≤–µ: —É–ª. –ü–æ–ª—è–Ω—ã, –¥. 5–ê, —Å—Ç—Ä. 1."),
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–æ–±–∫–∏
        ("„Äê6:0‚Ä†addresses.txt„Äë –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞", "–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞"),
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        ("[1:5source] –ü–µ—Ä–≤–∞—è [2:8source] –í—Ç–æ—Ä–∞—è [3:12source] –¢—Ä–µ—Ç—å—è", "–ü–µ—Ä–≤–∞—è –í—Ç–æ—Ä–∞—è –¢—Ä–µ—Ç—å—è"),
        
        # –ë–µ–∑ –º–µ—Ç–æ–∫
        ("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ—Ç–æ–∫", "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ—Ç–æ–∫"),
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ß–ò–°–¢–ö–ò –¢–ï–ö–°–¢–ê")
    print("=" * 50)
    
    passed = 0
    failed = 0
    
    for i, (input_text, expected_output) in enumerate(test_cases, 1):
        try:
            result = clean_source_marks(input_text)
            
            if result == expected_output:
                print(f"‚úÖ –¢–µ—Å—Ç {i}: –ü–†–û–ô–î–ï–ù")
                print(f"   –í—Ö–æ–¥: '{input_text}'")
                print(f"   –í—ã—Ö–æ–¥: '{result}'")
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {i}: –ü–†–û–í–ê–õ–ï–ù")
                print(f"   –í—Ö–æ–¥: '{input_text}'")
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected_output}'")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ: '{result}'")
                failed += 1
                
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {i}: –û–®–ò–ë–ö–ê - {e}")
            print(f"   –í—Ö–æ–¥: '{input_text}'")
            failed += 1
            
        print("-" * 30)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    return failed == 0

if __name__ == "__main__":
    test_cleaner()
